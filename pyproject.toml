[tool.poetry]
name = "openapi-mocker"
version = "0.2.0"
description = "A python mock wrapper around an OpenAPI/Swagger definition for client FV testing"

readme = 'README.md'

authors = ["Mark Perryman <mark.perryman@microsoft.com>"]

[tool.poetry.dependencies]
python = "^3.7"

# For `tox` testing, you must provide all test requirements as optional
# requirements in `dependencies` and in `extras.test` section.
# For testing via `poetry run pytest` they must also be as mandatory
# requirements in `dev-dependencies`.
pytest = { version = ">=7", optional = true }
pytest-cov = { version = ">=3.0.0", optional = true }

connexion = "^2.14.1"
requests = "^2.28.1"
multiprocess = "^0.70.12"

[tool.poetry.dev-dependencies]
pytest = ">=7"
mypy = ">=0.942"
pytest-cov = ">=3.0.0"
python-static-checks = ">=2.1.3"
types-setuptools = ">=57.4.7"
types-requests = "^2.28.11.2"

[tool.poetry.extras]
# For `tox` testing, you must provide all test requirements as optional
# requirements in `dependencies` and in `extras.test` section.
# For testing via `poetry run pytest` they must also be as mandatory
# requirements in `dev-dependencies`.
test = ["pytest", "pytest-cov"]

[tool.pytest]
mock_use_standalone_module = true

[tool.pytest.ini_options]
addopts = [
    "-v",
    "--strict-markers",
    "--cov=openapi_mocker",
    "--cov-branch",
    "--cov-report=term-missing",
]

log_format = "%(asctime)s.%(msecs)03d %(filename)s:%(lineno)d %(levelname)s %(message)s"
log_date_format = "%Y-%m-%dT%H:%M:%S"
log_level = "INFO"
log_cli = true
log_cli_level = "INFO"
log_file = "pytest.log"
log_file_level = 0
log_file_format = "%(asctime)s.%(msecs)03d %(filename)s:%(lineno)d %(levelname)s %(message)s"
log_file_date_format = "%Y-%m-%dT%H:%M:%S"

testpaths = ["tests"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"

[tool.pylint.messages_control]
# Ignore test code as pylint doesn't get along with pytest fixtures very well.
# These patterns are applied per-file and cannot be applied to entire directories.
ignore-patterns = "test.*,.*test,conftest.py"
disable = [
    # Ignore conventions and refactors - not recommended to include.
    "C",
    "R",

    # Covered by mypy
    "no-member",
    "no-name-in-module",
]

[tool.mypy]
files = ["src", "tests"]

strict = false

# Error codes can be used to write more specific `type: ignore` comments.
show_error_codes = true

# Enable additional useful error codes, see https://mypy.readthedocs.io/en/stable/error_code_list2.html
enable_error_code = [
  "ignore-without-code",
  "redundant-expr",
  "truthy-bool",
]

[[tool.mypy.overrides]]
module = "multiprocess.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "connexion.*"
ignore_missing_imports = true
